This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-12-10T07:30:23.754Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
image_layout/components/modal.tsx
image_layout/photo-feed/[id]/page.tsx
image_layout/photo-feed/@modal/(..)photo-feed/[id]/page.tsx
image_layout/photo-feed/@modal/default.tsx
image_layout/photo-feed/layout.tsx
image_layout/photo-feed/page.tsx
image_layout/photo-feed/styles.css
image_layout/photo-feed/wonders.ts
next.config.mjs
package.json
postcss.config.mjs
README.md
src/app/about/page.tsx
src/app/account/page.tsx
src/app/api/upload/route.ts
src/app/components_backup/account/page.tsx
src/app/components_backup/contact/page.tsx
src/app/components_backup/Footer_old.tsx
src/app/components_backup/Header_old.tsx
src/app/components_backup/Hero.tsx
src/app/components_backup/Polaroid.tsx
src/app/components_backup/SinglePolaroid.tsx
src/app/components/Comments.tsx
src/app/components/CookieConsent.tsx
src/app/components/DownloadButton.tsx
src/app/components/Footer.tsx
src/app/components/Header.tsx
src/app/components/Hero.tsx
src/app/components/Likes.tsx
src/app/components/Polaroid.tsx
src/app/components/SinglePolaroid.tsx
src/app/components/SlateEditor.tsx
src/app/contact/page.tsx
src/app/globals.css
src/app/layout.tsx
src/app/login/page.tsx
src/app/page.tsx
src/app/photo/[id]/page.tsx
src/app/register/page.tsx
src/app/utils/interfaces.tsx
tailwind.config_old.ts
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: image_layout/components/modal.tsx
================
"use client";
import { useCallback, useRef, useEffect, MouseEventHandler } from "react";
import { useRouter } from "next/navigation";

export default function Modal({ children }: { children: React.ReactNode }) {
  const overlay = useRef(null);
  const wrapper = useRef(null);
  const router = useRouter();

  const onDismiss = useCallback(() => {
    router.back();
  }, [router]);

  const onClick: MouseEventHandler = useCallback(
    (e) => {
      if (e.target === overlay.current || e.target === wrapper.current) {
        if (onDismiss) onDismiss();
      }
    },
    [onDismiss, overlay, wrapper]
  );

  const onKeyDown = useCallback(
    (e: KeyboardEvent) => {
      if (e.key === "Escape") onDismiss();
    },
    [onDismiss]
  );

  useEffect(() => {
    document.addEventListener("keydown", onKeyDown);
    return () => document.removeEventListener("keydown", onKeyDown);
  }, [onKeyDown]);

  return (
    <div
      ref={overlay}
      className="fixed z-10 left-0 right-0 top-0 bottom-0 mx-auto bg-black/60 p-10"
      onClick={onClick}
    >
      <div
        ref={wrapper}
        className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 sm:w-10/12 md:w-8/12 lg:w-2/5 p-6"
      >
        {children}
      </div>
    </div>
  );
}

================
File: image_layout/photo-feed/[id]/page.tsx
================
import Image from "next/image";
import wondersImages, { WonderImage } from "../wonders";

export default function PhotoPage({
  params: { id },
}: {
  params: { id: string };
}) {
  const photo: WonderImage = wondersImages.find((p) => p.id === id)!;
  return (
    <div className="container mx-auto my-10">
      <div className="w-1/2 mx-auto">
        <div>
          <h1 className="text-center text-3xl font-bold my-4">{photo.name}</h1>
        </div>
        <Image
          alt={photo.name}
          src={photo.src}
          className="w-full object-cover aspect-square "
        />

        <div className="bg-white py-4">
          <h3>{photo.photographer}</h3>
          <h3>{photo.location}</h3>
        </div>
      </div>
    </div>
  );
}

================
File: image_layout/photo-feed/@modal/(..)photo-feed/[id]/page.tsx
================
import Image from "next/image";
import wondersImages, { WonderImage } from "../../../wonders";
import Modal from "../../../../components/modal";

export default function PhotoModal({
  params: { id },
}: {
  params: { id: string };
}) {
  const photo: WonderImage = wondersImages.find((p) => p.id === id)!;

  return (
    <Modal>
      <Image
        alt={photo.name}
        src={photo.src}
        className="w-full object-cover aspect-square"
      />

      <div className="bg-white p-4">
        <h2 className="text-xl font-semibold">{photo.name}</h2>
        <h3>{photo.photographer}</h3>
        <h3>{photo.location}</h3>
      </div>
    </Modal>
  );
}

================
File: image_layout/photo-feed/@modal/default.tsx
================
export default function Default() {
  return null;
}

================
File: image_layout/photo-feed/layout.tsx
================
import "./styles.css";

export default function Layout(props: {
  modal: React.ReactNode;
  children: React.ReactNode;
}) {
  return (
    <>
      {props.modal}
      {props.children}
    </>
  );
}

================
File: image_layout/photo-feed/page.tsx
================
import Link from "next/link";
import wonders from "./wonders";
import Image from "next/image";

export default function Home() {
  return (
    <main className="container mx-auto">
      <h1 className="text-center text-3xl font-bold my-4">
        New Wonders of the World
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        {wonders.map(({ id, src, name }) => (
          <Link key={id} href={`/photo-feed/${id}`}>
            <Image
              alt={name}
              src={src}
              className="w-full object-cover aspect-square"
            />
          </Link>
        ))}
      </div>
    </main>
  );
}

================
File: image_layout/photo-feed/styles.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: image_layout/photo-feed/wonders.ts
================
import { StaticImageData } from "next/image";
import photo1 from "./photos/1.jpg";
import photo2 from "./photos/2.jpg";
import photo3 from "./photos/3.jpg";
import photo4 from "./photos/4.jpg";
import photo5 from "./photos/5.jpg";
import photo6 from "./photos/6.jpg";
import photo7 from "./photos/7.jpg";

export type WonderImage = {
  id: string;
  name: string;
  src: StaticImageData;
  photographer: string;
  location: string;
};

const wondersImages: WonderImage[] = [
  {
    id: "1",
    name: "Great Wall of China",
    src: photo1,
    photographer: "Photo by Max van den Oetelaar on Unsplash",
    location: "China",
  },
  {
    id: "2",
    name: "Petra",
    src: photo2,
    photographer: "Photo by Reiseuhu on Unsplash",
    location: "Jordan",
  },
  {
    id: "3",
    name: "Christ the Redeemer",
    src: photo3,
    photographer: "Photo by Andrea Leopardi on Unsplash",
    location: "Brazil",
  },
  {
    id: "4",
    name: "Machu Picchu",
    src: photo4,
    photographer: "Photo by Jared Schwitzke on Unsplash",
    location: "Peru",
  },
  {
    id: "5",
    name: "Chichen Itza",
    src: photo5,
    photographer: "Photo by E Mens on Unsplash",
    location: "Mexico",
  },
  {
    id: "6",
    name: "Roman Colosseum",
    src: photo6,
    photographer: "Photo by Andrea Cipriano on Unsplash",
    location: "Italy",
  },
  {
    id: "7",
    name: "Taj Mahal",
    src: photo7,
    photographer: "Photo by Su San Lee on Unsplash",
    location: "India",
  },
];

export default wondersImages;

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
    images: {
        remotePatterns: [
            {
                protocol: 'https',
                hostname: 'images.pexels.com',
                port: '',
                pathname: '**'
            },
        ],
    },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "photostockage",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@types/formidable": "^3.4.5",
    "formidable": "^3.5.2",
    "lucide-react": "^0.468.0",
    "mysql2": "^3.9.7",
    "next": "^14.2.3",
    "react": "^18",
    "react-dom": "^18",
    "react-icons": "^5.3.0",
    "sharp": "^0.33.4",
    "slate": "^0.110.2",
    "slate-history": "^0.110.3",
    "slate-react": "^0.111.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: src/app/about/page.tsx
================
import React from "react";
import {
  FaCloudUploadAlt,
  FaDownload,
  FaHeart,
  FaComments,
} from "react-icons/fa";
import { IoShareSocialSharp } from "react-icons/io5";
import { FaUserGroup } from "react-icons/fa6";
import Link from "next/link";

export default function About() {
  return (
    <div className="min-h-[100vh] mx-auto px-4 md:px-8 max-w-4xl py-24">
      <h1 className="text-3xl font-medium text-gray-900 mb-8 text-center">
        About photoStockage
      </h1>

      <div className="mb-16 text-gray-600 text-lg text-center max-w-2xl mx-auto">
        <p>
          Hey there! Welcome to photoStockage, where sharing photos is as easy
          as it gets. We&apos;re all about creating a space where photographers
          and creative folks can come together to share their work, find
          inspiration, and grab amazing photos for their projects - all
          completely free.
        </p>
      </div>

      <div className="grid md:grid-cols-2 gap-8 mb-16">
        {/* Upload Feature */}
        <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
          <div className="flex items-center mb-4">
            <FaCloudUploadAlt className="text-indigo-500 text-4xl mr-4" />
            <h2 className="text-xl font-semibold text-gray-800">Easy Upload</h2>
          </div>
          <p className="text-gray-600">
            Just drag, drop, and you&apos;re done! Share your photos with our
            community in seconds.
          </p>
        </div>

        {/* Download Feature */}
        <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
          <div className="flex items-center mb-4">
            <FaDownload className="text-indigo-500 text-4xl mr-4" />
            <h2 className="text-xl font-semibold text-gray-800">
              Free Downloads
            </h2>
          </div>
          <p className="text-gray-600">
            No subscription needed, no credit card required. All photos are free
            to download and use.
          </p>
        </div>

        {/* Community Feature */}
        <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
          <div className="flex items-center mb-4">
            <FaUserGroup className="text-indigo-500 text-4xl mr-4" />
            <h2 className="text-xl font-semibold text-gray-800">
              Active Community
            </h2>
          </div>
          <p className="text-gray-600">
            Connect with fellow photographers and creators who share your
            passion for great images.
          </p>
        </div>

        {/* Interaction Feature */}
        <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
          <div className="flex items-center mb-4">
            <div className="flex space-x-1 text-indigo-500 text-4xl mr-4">
              <FaHeart />
              <FaComments />
            </div>
            <h2 className="text-xl font-semibold text-gray-800">
              Show Some Love
            </h2>
          </div>
          <p className="text-gray-600">
            Like your favorite shots and leave comments to connect with
            photographers.
          </p>
        </div>
      </div>

      <div className="bg-indigo-50 p-8 rounded-lg text-center">
        <IoShareSocialSharp className="text-indigo-500 text-4xl mx-auto mb-4" />
        <h2 className="text-2xl font-semibold text-gray-800 mb-4">
          Ready to dive in?
        </h2>
        <p className="text-gray-600 mb-6">
          Join our growing community of creative minds and start sharing your
          perspective with the world.
        </p>
        <Link href="/register">
          <button className="bg-indigo-500 text-white px-8 py-3 rounded-md hover:bg-indigo-600 transition-colors">
            Get Started
          </button>
        </Link>
      </div>

      <div className="mt-16 space-y-8">
        {/* Cookie Information */}
        <div className="bg-white p-8 rounded-lg shadow-md">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6">
            Cookie Usage
          </h2>
          <div className="space-y-4 text-gray-600">
            <p className="font-semibold">Our Limited Cookie Usage:</p>
            <ul className="list-disc pl-5 space-y-2">
              <li>
                <span className="font-semibold">Session Cookies:</span> These
                temporary cookies are essential for keeping you logged in during
                your visit and expire when you close your browser.
              </li>
              <li>
                <span className="font-semibold">Authentication Cookies:</span>{" "}
                These cookies remember your login status so you don&apos;t have
                to log in every time you visit our site.
              </li>
            </ul>
            <div className="mt-6 p-4 bg-blue-50 rounded-lg">
              <p className="font-semibold text-blue-900">Important Notice:</p>
              <p className="text-blue-900 mt-2">
                These cookies are used ONLY to enhance your experience on our
                site and will NEVER be used for marketing or any other purpose.
              </p>
            </div>
          </div>
        </div>

        {/* Legal Notice */}
        <div className="bg-gray-50 p-8 rounded-lg border border-gray-200">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6">
            Legal Notice
          </h2>
          <div className="space-y-4 text-gray-600">
            <p>
              photoStockage is a platform that enables photo sharing between
              users. We do not claim ownership of any content uploaded by users.
            </p>
            <p className="font-semibold mt-4">Legal Disclaimer:</p>
            <ul className="list-disc pl-5 space-y-2">
              <li>
                photoStockage does not take any responsibility regarding the
                content of the photos uploaded to our platform.
              </li>
              <li>
                Users are solely responsible for the content they upload and
                share.
              </li>
              <li>
                photoStockage is not liable for any damages or consequences
                arising from the use or misuse of photos downloaded from our
                platform.
              </li>
              <li>
                By using this platform, users acknowledge that they have the
                necessary rights and permissions to upload and share their
                content.
              </li>
              <li>
                Users downloading content are responsible for ensuring their use
                complies with applicable laws and regulations.
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/account/page.tsx
================
import React from "react";
import Image from "next/image";
import logoFull from "../../../public/logo_full.png";
import Link from "next/link";

export default async function Account() {
  return (
    <div className="min-h-[100vh] flex flex-col px-0 sm:px-5 md:px-[5rem] mx-auto">
      <div
        className="flex flex-col items-center mt-[5rem] p-0 sm:p-10 md:flex-row md:items-stretch 
                        md:border-2 md:border-solid md:border-blue-900 md:outline md:outline-2 
                        md:outline-offset-[15px] md:outline-blue-900 relative"
      >
        <div className="w-full text-center px-4 md:w-1/3 md:pr-4">
          <Image
            src={logoFull}
            width={0}
            height={0}
            sizes="100vw"
            alt="Site logo"
            className="w-[5rem] h-auto pt-24 mb-4 mx-auto"
          />
          <p className="text-gray-600 leading-relaxed text-base">
            You can also contact us through email.
          </p>
          <p className="text-gray-600 leading-relaxed text-base">
            Email: photostockage@photostockage.com
          </p>
          <p className="text-gray-600 leading-relaxed text-base">
            Or through our social media links that can be found{" "}
            <Link href="/">here</Link>
          </p>
        </div>

        {/* Vertical Divider */}
        <div className="hidden md:block absolute top-4 bottom-4 left-1/3 w-px bg-blue-900"></div>

        <div className="w-full md:w-2/3 md:pl-4">
          <section className="text-gray-600 body-font relative">
            <div className="container py-24 mx-auto">
              <div className="flex flex-col text-center w-full mb-12">
                <h1 className="text-3xl font-medium title-font mb-4 text-gray-900">
                  Contact Us
                </h1>
                <p className="mx-auto leading-relaxed text-base w-full sm:w-2/3">
                  For any questions you might have. For any suggestions. Or just
                  to chat with us.
                </p>
              </div>
              <div className="w-full px-4 sm:w-1/2 sm:mx-auto">
                <div className="flex flex-wrap -m-2">
                  <div className="p-2 w-full sm:w-1/2">
                    <div className="relative">
                      <label
                        htmlFor="name"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Name
                      </label>
                      <input
                        type="text"
                        id="name"
                        name="name"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                      />
                    </div>
                  </div>
                  <div className="p-2 w-full sm:w-1/2">
                    <div className="relative">
                      <label
                        htmlFor="email"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Email
                      </label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                      />
                    </div>
                  </div>
                  <div className="p-2 w-full">
                    <div className="relative">
                      <label
                        htmlFor="message"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Message
                      </label>
                      <textarea
                        id="message"
                        name="message"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"
                      ></textarea>
                    </div>
                  </div>
                  <div className="p-2 w-full">
                    <button className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg">
                      Send message
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/api/upload/route.ts
================
import { NextResponse } from "next/server";
import { writeFile } from "fs/promises";
import { join } from "path";

export async function POST(req: Request) {
  try {
    const data = await req.formData();
    const file: File | null = data.get("file") as unknown as File;
    const fileIdentifier = data.get("identifier") as string;

    if (!file) {
      return NextResponse.json(
        { success: false, error: "No file uploaded" },
        { status: 400 }
      );
    }

    if (!fileIdentifier) {
      return NextResponse.json(
        { success: false, error: "No file identifier provided" },
        { status: 400 }
      );
    }

    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    const fileName = `${fileIdentifier}${file.name.substring(
      file.name.lastIndexOf(".")
    )}`;
    const uploadDir = join(process.cwd(), "public/images/users");
    const path = join(uploadDir, fileName);

    await writeFile(path, buffer);

    return NextResponse.json({
      success: true,
      fileUrl: `/images/users/${fileName}`,
    });
  } catch (error) {
    console.error("Error uploading file:", error);
    return NextResponse.json(
      { success: false, error: "Failed to upload file" },
      { status: 500 }
    );
  }
}

================
File: src/app/components_backup/account/page.tsx
================
import React from 'react'
import Image from 'next/image'
import logoFull from '../../../public/logo_full.png'
import Link from 'next/link'


export default async function Account() {
    return (
        <div className='min-h-[100vh] flex px-[5rem] md:px-5 sm:px-0 mx-auto'>
         <div className="post-card flex justify-center divide-x divide-solid divide-blue-900 border-blue-900 border-solid border-2 mt-[5rem] outline outline-2 
                        outline-offset-[15px] outline-blue-900 p-10 lgcustom:flex-col lgcustom:items-center lgcustom:divide-none lgcustom:text-center usm:outline-0 usm:border-0 usm:p-0">
            <div className="left w-1/2 flex flex-col items-center flex-wrap lgcustom:min-w-full pr-[0.25rem]">
                <Image src={logoFull} width={0} height={0} sizes='100vw' alt='Site logo' className='w-[5rem] h-auto pt-24 mb-4' />
                <p className='text-gray-600 mx-auto leading-relaxed text-base'>You can also contact us through email.</p>
                <p className='text-gray-600 mx-auto leading-relaxed text-base'>Email: photostockage@photostockage.com</p>
                <p className='text-gray-600 mx-auto leading-relaxed text-base'>Or through our social media links that can be found <Link href='/'>here</Link></p>
            </div>

            <div className="right w-1/2 lgcustom:min-w-full">
                <section className="text-gray-600 body-font relative">
                    <div className="container py-24 mx-auto">
                        <div className="flex flex-col text-center w-full mb-12">
                            <h1 className="text-3xl font-medium title-font mb-4 text-gray-900">Contact Us</h1>
                            <p className="w-2/3 mx-auto leading-relaxed text-base">For any questions you might have. For any suggestions. Or just to chat with us.</p>
                        </div>
                            <div className="w-1/2 mx-auto">
                                <div className="flex flex-wrap -m-2">
                                    <div className="p-2 w-1/2 lgcustom:w-full">
                                        <div className="relative">
                                            <label htmlFor="name" className="leading-7 text-sm text-gray-600">Name</label>
                                            <input type="text" id="name" name="name" className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out" />
                                        </div>
                                    </div>
                                    <div className="p-2 w-1/2 lgcustom:w-full">
                                        <div className="relative">
                                            <label htmlFor="email" className="leading-7 text-sm text-gray-600">Email</label>
                                            <input type="email" id="email" name="email" className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out" />
                                        </div>
                                    </div>
                                    <div className="p-2 w-full">
                                        <div className="relative">
                                            <label htmlFor="message" className="leading-7 text-sm text-gray-600">Message</label>
                                            <textarea id="message" name="message" className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"></textarea>
                                        </div>
                                    </div>
                                    <div className="p-2 w-full">
                                        <button className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg">Send message</button>
                                    </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
    )
}

================
File: src/app/components_backup/contact/page.tsx
================
import React from 'react'
import Image from 'next/image'
import logoFull from '../../../public/logo_full.png'
import Link from 'next/link'

export default function ContactUs () {
  return (
    <div className='min-h-[100vh] flex px-[5rem] md:px-5 sm:px-0 mx-auto'>
         <div className="post-card flex justify-center divide-x divide-solid divide-blue-900 border-blue-900 border-solid border-2 mt-[5rem] outline outline-2 outline-offset-[15px] outline-blue-900 p-10 lgcustom:flex-col lgcustom:items-center lgcustom:divide-none lgcustom:text-center usm:outline-0 usm:border-0 usm:p-0">
            <div className="left w-1/3 flex flex-col items-center xl:w-1/2 flex-wrap lgcustom:min-w-full pr-[0.25rem]">
                <Image src={logoFull} width={0} height={0} sizes='100vw' alt='Site logo' className='w-[5rem] h-auto pt-24 mb-4' />
                <p className='text-gray-600 mx-auto leading-relaxed text-base'>You can also contact us through email.</p>
                <p className='text-gray-600 mx-auto leading-relaxed text-base'>Email: photostockage@photostockage.com</p>
                <p className='text-gray-600 mx-auto leading-relaxed text-base'>Or through our social media links that can be found <Link href='/'>here</Link></p>
            </div>

            <div className="right w-2/3 lgcustom:min-w-full">
                <section className="text-gray-600 body-font relative">
                    <div className="container py-24 mx-auto">
                        <div className="flex flex-col text-center w-full mb-12">
                            <h1 className="text-3xl font-medium title-font mb-4 text-gray-900">Contact Us</h1>
                            <p className="w-2/3 mx-auto leading-relaxed text-base">For any questions you might have. For any suggestions. Or just to chat with us.</p>
                        </div>
                            <div className="w-1/2 mx-auto">
                                <div className="flex flex-wrap -m-2">
                                    <div className="p-2 w-1/2 lgcustom:w-full">
                                        <div className="relative">
                                            <label htmlFor="name" className="leading-7 text-sm text-gray-600">Name</label>
                                            <input type="text" id="name" name="name" className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out" />
                                        </div>
                                    </div>
                                    <div className="p-2 w-1/2 lgcustom:w-full">
                                        <div className="relative">
                                            <label htmlFor="email" className="leading-7 text-sm text-gray-600">Email</label>
                                            <input type="email" id="email" name="email" className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out" />
                                        </div>
                                    </div>
                                    <div className="p-2 w-full">
                                        <div className="relative">
                                            <label htmlFor="message" className="leading-7 text-sm text-gray-600">Message</label>
                                            <textarea id="message" name="message" className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"></textarea>
                                        </div>
                                    </div>
                                    <div className="p-2 w-full">
                                        <button className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg">Send message</button>
                                    </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
   
    
    
  )
}

================
File: src/app/components_backup/Footer_old.tsx
================
import React from 'react'
import Link from 'next/link'
import Image from 'next/image'
import logoFull from '../../../public/logo_full.png'

export const Footer = () => {
  return (
    <footer className='text-gray-600 body-font mt-[5rem]'>
        <div className="container py-25 flex justify-between px-[5rem] md:px-0 md:flex-col md:justify-center md:items-center md:py-1">
            <div className='w-64 mx-0'>
                <Link className='flex title-font font-medium items-center text-gray-900' href='/'>
                    <Image src={logoFull} width={0} height={0} sizes='100vw' alt='Site logo' className='max-w-[5rem] h-full' />
                    <span className="text-xl">photoStockage</span>
                </Link>
                <p className="mt-2 text-sm text-gray-500 ml-6">Share your photos, share your experience</p>
            </div>
            <div className='flex md:mt-10'>
                <div className="flex flex-wrap pl-20 mb-10 mt-0 text-left md:pl-0">
                    <div className="px-4 sm:px-0">
                        <h2 className='title-font font-medium text-gray-900 tracking-wideset mb-3'>Account</h2>
                        <nav className="list-none mb-10">
                            <li>
                                <Link className='text-gray-600 hover:text-gray-800 text-sm' href='/'>Login</Link>
                            </li>
                            <li>
                                <Link className='text-gray-600 hover:text-gray-800 text-sm' href='/'>Sign up</Link>
                            </li>
                        </nav>
                    </div>
                </div>


                <div className="flex flex-wrap pl-20 mb-10 mt-0 text-left">
                    <div className="px-4 sm:px-0">
                        <h2 className='title-font font-medium text-gray-900 tracking-wideset mb-3'>Contact us</h2>
                        <nav className="list-none mb-10">
                            <li>
                                <Link className='text-gray-600 hover:text-gray-800 text-sm' href='/'>For suggestions</Link>
                            </li>
                            <li>
                                <Link className='text-gray-600 hover:text-gray-800 text-sm' href='/'>For questions</Link>
                            </li>
                            <li>
                                <Link className='text-gray-600 hover:text-gray-800 text-sm' href='/'>Contact us here</Link>
                            </li>
                        </nav>
                    </div>
                </div>
            </div>
            
            

        </div>
        <div className="bg-gray-100 flex mdcustom:flex-col">
            <div className="container mx-auto py-4 px-5 flex flex-wrap">
                <div className='flex sm:mx-auto'>
                    <p className='text-gray-500 text-sm text-left'>© 2024 SigmundFrost —</p>
                    <Link className='text-gray-500 text-sm text-left' href='https://github.com/EsFrost'>&nbsp; @SigmundFrost</Link>
                </div>
                
                <div className='flex sm:mx-auto ml-auto smcustom:mt-3'>
                    <span className="flex ml-auto mt-0 justify-start">
                        <Link className="text-gray-500 hover:text-blue-900 transition-all duration-300" href='/'>
                            <svg fill="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-5 h-5" viewBox="0 0 24 24">
                                <path d="M18 2h-3a5 5 0 00-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 011-1h3z"></path>
                            </svg>
                        </Link>

                        <Link className="ml-3 text-gray-500 hover:text-blue-900 transition-all duration-300" href='/'>
                        <svg fill="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-5 h-5" viewBox="0 0 24 24">
                            <path d="M23 3a10.9 10.9 0 01-3.14 1.53 4.48 4.48 0 00-7.86 3v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z"></path>
                        </svg>
                        </Link>

                        <Link className="ml-3 text-gray-500 hover:text-blue-900 transition-all duration-300" href='/'>
                        <svg fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-5 h-5" viewBox="0 0 24 24">
                            <rect width="20" height="20" x="2" y="2" rx="5" ry="5"></rect>
                            <path d="M16 11.37A4 4 0 1112.63 8 4 4 0 0116 11.37zm1.5-4.87h.01"></path>
                        </svg>
                        </Link>

                        <Link className="ml-3 text-gray-500 hover:text-blue-900 transition-all duration-300" href='/'>
                        <svg fill="currentColor" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="0" className="w-5 h-5" viewBox="0 0 24 24">
                            <path stroke="none" d="M16 8a6 6 0 016 6v7h-4v-7a2 2 0 00-2-2 2 2 0 00-2 2v7h-4v-7a6 6 0 016-6zM2 9h4v12H2z"></path>
                            <circle cx="4" cy="4" r="2" stroke="none"></circle>
                        </svg>
                        </Link>
                    </span>
                </div>
                
            </div>
        </div>
    </footer>
  )
}

================
File: src/app/components_backup/Header_old.tsx
================
import React from 'react'
import Link from 'next/link'
import Image from 'next/image'
import logoFull from '../../../public/logo_full.png'

export const Header = () => {
    const logo = '@/src/app/media/logo_full.png'
  return (
    <header className='text-gray-600 body-font'>
        <div className='container mx-auto flex flex-wrap p-5 flex-row items-center justify-between mdim:flex-col'>
            <Link className='flex order-none title-font font-medium items-center text-gray-900 justify-center' href='/'>
                <Image src={logoFull} width={0} height={0} sizes='100vw' alt='Site logo' className='max-w-[5rem] h-full' />
                <span className="text-xl mdim:hidden">photoStockage</span>
            </Link>
        
            <nav className='flex flex-wrap items-center text-base mdim:mt-3'>
                <Link className='mr-5 hover:text-gray-900 bg-left-bottom bg-gradient-to-r from-[#4f46e5] to-[#d4d2f4] bg-[length:0%_2px] bg-no-repeat hover:bg-[length:100%_2px] transition-all duration-500 ease-out' href='/'>Home</Link>
                <Link className='mr-5 hover:text-gray-900 bg-left-bottom bg-gradient-to-r from-[#4f46e5] to-[#d4d2f4] bg-[length:0%_2px] bg-no-repeat hover:bg-[length:100%_2px] transition-all duration-500 ease-out' href='/about'>About</Link>
                <Link className='mr-5 hover:text-gray-900 bg-left-bottom bg-gradient-to-r from-[#4f46e5] to-[#d4d2f4] bg-[length:0%_2px] bg-no-repeat hover:bg-[length:100%_2px] transition-all duration-500 ease-out' href='/contact'>Contact Us</Link>
            </nav>
            

            <div className="flex justify-end ml-0">

                    <button className="inline-flex items-center text-white bg-indigo-500 border-0 py-1 px-3 focus:outline-none hover:bg-indigo-600 rounded text-base mt-0 mdim:mt-3">
                        Sign Up
                    </button>


                        <button className='inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-0 mdim:mt-3 ml-5 text-inherit'>Login</button>



                    <div className='px-3 pt-1 mdim:pt-5'>

                    </div>
                

            </div>
        </div>
    </header>
  )
}


/* 
<SignedIn>
    <UserButton />
</SignedIn>
*/

================
File: src/app/components_backup/Hero.tsx
================
import React from 'react'
import Image from 'next/image'


export const Hero = () => {
  return (
    <section className="text-gray-600 body-font px-[2rem]">
        <div className="container mx-auto flex px-5 lgcustom:px-0 py-24 items-center">
            <div className="flex-grow pr-24 lgcustom:pr-0 flex items-start text-left mb-0 flex-col">
                <h1 className="title-font text-3xl mb-4 font-medium text-gray-900">
                    Share your photos. Download photos for your next project
                    <br className='inline-block' />Start here.
                </h1>
                <p className="mb-9 leading-relaxed">
                    Do you have photos you want to share with others? Do you want to find photos to use for your next project? Are you tired of copyright protected material? Then this site is the place to be.
                    Start now by signing up or logging in.
                </p>
                <div className="flex justify-center">

                        <button className="inline-flex text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg">
                            Sign Up
                        </button>


                            <button className="ml-4 inline-flex text-gray-700 bg-gray-100 border-0 py-2 px-6 focus:outline-none hover:bg-gray-200 rounded text-lg">
                                Login
                            </button>

                </div>
            </div>
            <Image
                src='https://images.pexels.com/photos/147411/italy-mountains-dawn-daybreak-147411.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                width={0}
                height={0}
                alt='Picture'
                sizes='100vw'
                className='object-cover object-center rounded h-auto w-[720px] xl:w-[520px] lg:max-w-[480px] lg:min-w-[420px] lgcustom:hidden'
            />
        </div>
    </section>
  )
}

================
File: src/app/components_backup/Polaroid.tsx
================
import React from 'react'
import Image from 'next/image'
import Link from 'next/link'

export const Polaroid = () => {
  return (
    <div className='flex gap-[30px] mt-5 sm:flex-col mx-[2rem] flex-wrap justify-around'>
            
            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 1'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 1'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 1'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 1'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 1'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 1'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 1'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 1'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 1'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>

            <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] hover:scale-[1.1] transition-all duration-500 after:transition-all after:opacity-50 after:hover:opacity-100 after:duration-1000
                sm:justify-center sm:align-center sm:mx-auto
                ' polaroid-caption='Image 2'>
                    <Link href='/'>
                        <Image
                            src='https://images.pexels.com/photos/346529/pexels-photo-346529.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
                            width={0}
                            height={0}
                            alt='Picture'
                            sizes='100vw'
                            className='max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto'
                        />
                    </Link>
            </div>
    </div>
    
  )
}

================
File: src/app/components_backup/SinglePolaroid.tsx
================
import React from 'react'
import Image from 'next/image'

export const SinglePolaroid = () => {
  return (
    <div className='mt-[5rem] min-h-[100vh] mx-auto sm:min-h-0'>
      <div className='
                border-solid border-1 border-gray-900 p-[15px] pb-[60px] shadow-[5px_15px_15px_rgb(225,225,225)] h-full relative
                after:content-[attr(polaroid-caption)] after:absolute after:bottom-0 after:left-0 after:w-[100%] after:text-center after:p-[10px] after:text-[30px]
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] transition-all duration-500
                ' polaroid-caption='Image 1'>
        <Image
              src='https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'
              alt='Picture'
              sizes='100vw'
              width={0}
              height={0}
              quality={100}
              className='w-full object-scale-down max-w-[80vw] max-h-[80vh]'
              unoptimized
        />
      </div>
    </div>
    
  )
}

================
File: src/app/components/Comments.tsx
================
"use client";
import React, { useState, useEffect, useCallback } from "react";
import { Comment, User } from "../utils/interfaces";
import SlateEditor from "./SlateEditor";
import { FaRegCircleUser } from "react-icons/fa6";
import Image from "next/image";

interface CommentWithUser extends Comment {
  username?: string;
  user_icon?: string;
}

export const Comments = ({ photo_id }: { photo_id: string }) => {
  const [comments, setComments] = useState<CommentWithUser[]>([]);
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(true);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = localStorage.getItem("tokenExpires");
      const isAuthenticated =
        isLoggedIn && tokenExpires && Number(tokenExpires) > Date.now();

      setIsAuthenticated(Boolean(isAuthenticated));
    };

    checkAuth();
    window.addEventListener("storage", checkAuth);
    window.addEventListener("logoutEvent", checkAuth);

    return () => {
      window.removeEventListener("storage", checkAuth);
      window.removeEventListener("logoutEvent", checkAuth);
    };
  }, []);

  const fetchData = useCallback(async () => {
    if (!photo_id) return;

    try {
      const [commentsResponse, usersResponse] = await Promise.all([
        fetch(`http://localhost:3000/comments/photo/${photo_id}`, {
          headers: { Accept: "application/json" },
        }),
        fetch(`http://localhost:3000/user/users`, {
          headers: { Accept: "application/json" },
        }),
      ]);

      if (!commentsResponse.ok || !usersResponse.ok) {
        throw new Error(`HTTP error! status: ${commentsResponse.status}`);
      }

      const commentsData = await commentsResponse.json();
      const usersData: User[] = await usersResponse.json();

      const userMap = new Map(
        usersData.flatMap((user) => [
          [user.id, { username: user.username, user_icon: user.user_icon }],
        ])
      );

      const commentsWithUsernames = commentsData.map((comment: Comment) => {
        const userData = userMap.get(comment.id_user) || {
          username: "Unknown User",
          user_icon: "",
        };
        return {
          ...comment,
          username: userData.username,
          user_icon: userData.user_icon,
        };
      });

      setComments(commentsWithUsernames);
    } catch (error) {
      console.error("Error fetching data:", error);
      setError(error instanceof Error ? error.message : "Failed to fetch data");
    } finally {
      setLoading(false);
    }
  }, [photo_id]); // Dependency array ensures fetchData is recreated only when photo_id changes.

  useEffect(() => {
    fetchData();
    const interval = setInterval(fetchData, 5000);
    return () => clearInterval(interval);
  }, [fetchData]);

  const handleCommentSubmit = async (content: string) => {
    try {
      const response = await fetch(
        `http://localhost:3000/comments/add/${photo_id}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          credentials: "include",
          body: JSON.stringify({ content }),
        }
      );

      if (!response.ok) {
        throw new Error("Failed to post comment");
      }

      // Refresh comments after successful submission
      await fetchData();
    } catch (error) {
      console.error("Error posting comment:", error);
      setError(
        error instanceof Error ? error.message : "Failed to post comment"
      );
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>{error}</div>;
  }

  return (
    <div className="">
      <div className="mx-auto max-w-xl mb-8">Comments</div>
      {comments.map((comment, index) => (
        <div
          key={`${comment.id}-${index}`}
          className={`${
            index % 2 === 0 ? "bg-[#6366F1] bg-opacity-10" : ""
          } max-w-xl mx-auto border border-1 border-gray-200 rounded-md p-4 flex flex-col mt-4`}
        >
          <div className={`${index % 2 === 0 ? "text-left" : "text-right"}`}>
            {comment.content}
          </div>
          <div
            className={`${
              index % 2 === 0 ? "text-right" : "text-left"
            } flex items-center gap-2 ${
              index % 2 === 0 ? "justify-end" : "justify-start"
            }`}
          >
            {comment.user_icon ? (
              <Image
                src={comment.user_icon}
                alt="User avatar"
                width={24}
                height={24}
                className="rounded-full object-cover w-6 h-6"
              />
            ) : (
              <FaRegCircleUser className="w-6 h-6 text-gray-600" />
            )}
            <span>{comment.username}</span>
          </div>
        </div>
      ))}
      {isAuthenticated ? (
        <div className="mt-8 max-w-xl mx-auto">
          <SlateEditor onSubmit={handleCommentSubmit} />
        </div>
      ) : (
        <div className="mt-8 max-w-xl mx-auto text-center text-gray-500">
          Please log in to leave a comment.
        </div>
      )}
    </div>
  );
};

================
File: src/app/components/CookieConsent.tsx
================
"use client";
import React, { useEffect, useState } from "react";

const CookieConsent = () => {
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    const consent = localStorage.getItem("cookieConsent");
    if (!consent) {
      setShowModal(true);
    }
  }, []);

  const acceptCookies = () => {
    localStorage.setItem("cookieConsent", "accepted");
    setShowModal(false);
  };

  if (!showModal) return null;

  return (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg z-50">
      <div className="max-w-7xl mx-auto p-6">
        <div className="flex flex-col md:flex-row items-center justify-between">
          <div className="mb-4 md:mb-0 md:mr-4">
            <p className="text-gray-600">
              We use cookies solely to enhance your browsing experience and
              maintain your login session. These cookies are essential for the
              website to function properly and are never used for marketing,
              tracking, or any other purpose.
            </p>
          </div>
          <div className="flex-shrink-0">
            <button
              onClick={acceptCookies}
              className="bg-indigo-500 text-white px-6 py-2 rounded-md hover:bg-indigo-600 transition-colors whitespace-nowrap"
            >
              I Understand
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CookieConsent;

================
File: src/app/components/DownloadButton.tsx
================
import React from "react";
import { Download } from "lucide-react";

interface DownloadButtonProps {
  onClick: () => void;
  isLoading?: boolean;
}

const DownloadButton = ({
  onClick,
  isLoading = false,
}: DownloadButtonProps) => {
  return (
    <button
      onClick={onClick}
      disabled={isLoading}
      className="inline-flex items-center gap-2 bg-indigo-500 text-white px-4 py-2 rounded-md 
                 hover:bg-indigo-600 transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      <Download className="w-5 h-5" />
      {isLoading ? "Downloading..." : "Download"}
    </button>
  );
};

export default DownloadButton;

================
File: src/app/components/Footer.tsx
================
import React from "react";
import Link from "next/link";
import Image from "next/image";
import logoFull from "../../../public/logo_full.png";

export const Footer = () => {
  return (
    <footer className="text-gray-600 body-font mt-[5rem]">
      <div className="container mx-auto flex flex-col items-center justify-center py-1 px-5 md:flex-row md:justify-between md:px-[5rem]">
        <div className="flex flex-col items-center md:items-start w-64">
          <Link
            className="flex title-font font-medium items-center text-gray-900"
            href="/"
          >
            <Image
              src={logoFull}
              width={0}
              height={0}
              sizes="100vw"
              alt="Site logo"
              className="max-w-[5rem] h-full"
            />
            <span className="text-xl">photoStockage</span>
          </Link>
          <p className="mt-2 text-sm text-gray-500 text-center md:text-left md:pl-6">
            Share your photos, share your experience
          </p>
        </div>
        <div className="flex flex-col items-center mt-10 md:flex-row md:mt-0 md:items-start">
          <div className="flex flex-col items-center mb-10 md:items-start md:pl-20">
            <div className="px-0 sm:px-4">
              <h2 className="title-font font-medium text-gray-900 tracking-wideset mb-3">
                Account
              </h2>
              <nav className="list-none mb-10 text-center md:text-left">
                <li>
                  <Link
                    className="text-gray-600 hover:text-gray-800 text-sm"
                    href="/"
                  >
                    Login
                  </Link>
                </li>
                <li>
                  <Link
                    className="text-gray-600 hover:text-gray-800 text-sm"
                    href="/"
                  >
                    Sign up
                  </Link>
                </li>
              </nav>
            </div>
          </div>

          <div className="flex flex-col items-center text-center md:text-left mb-10 md:items-start md:pl-20">
            <div className="px-0 sm:px-4">
              <h2 className="title-font font-medium text-gray-900 tracking-wideset mb-3">
                Contact us
              </h2>
              <nav className="list-none mb-10 text-center md:text-left">
                <li>
                  <Link
                    className="text-gray-600 hover:text-gray-800 text-sm"
                    href="/"
                  >
                    For suggestions
                  </Link>
                </li>
                <li>
                  <Link
                    className="text-gray-600 hover:text-gray-800 text-sm"
                    href="/"
                  >
                    For questions
                  </Link>
                </li>
                <li>
                  <Link
                    className="text-gray-600 hover:text-gray-800 text-sm"
                    href="/"
                  >
                    Contact us here
                  </Link>
                </li>
              </nav>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-gray-100">
        <div className="container mx-auto py-4 px-5">
          <div className="flex flex-col items-center sm:items-start md:flex-row md:justify-between">
            <div className="flex items-center">
              <p className="text-gray-500 text-sm text-center md:text-left">
                © 2024 SigmundFrost —
              </p>
              <Link
                className="text-gray-500 text-sm text-center md:text-left"
                href="https://github.com/EsFrost"
              >
                &nbsp; @SigmundFrost
              </Link>
            </div>

            <div className="flex mt-3 md:mt-0">
              <span className="flex justify-center md:ml-auto md:justify-start">
                <Link
                  className="text-gray-500 hover:text-blue-900 transition-all duration-300"
                  href="/"
                >
                  <svg
                    fill="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    className="w-5 h-5"
                    viewBox="0 0 24 24"
                  >
                    <path d="M18 2h-3a5 5 0 00-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 011-1h3z"></path>
                  </svg>
                </Link>

                <Link
                  className="ml-3 text-gray-500 hover:text-blue-900 transition-all duration-300"
                  href="/"
                >
                  <svg
                    fill="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    className="w-5 h-5"
                    viewBox="0 0 24 24"
                  >
                    <path d="M23 3a10.9 10.9 0 01-3.14 1.53 4.48 4.48 0 00-7.86 3v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z"></path>
                  </svg>
                </Link>

                <Link
                  className="ml-3 text-gray-500 hover:text-blue-900 transition-all duration-300"
                  href="/"
                >
                  <svg
                    fill="none"
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    className="w-5 h-5"
                    viewBox="0 0 24 24"
                  >
                    <rect
                      width="20"
                      height="20"
                      x="2"
                      y="2"
                      rx="5"
                      ry="5"
                    ></rect>
                    <path d="M16 11.37A4 4 0 1112.63 8 4 4 0 0116 11.37zm1.5-4.87h.01"></path>
                  </svg>
                </Link>

                <Link
                  className="ml-3 text-gray-500 hover:text-blue-900 transition-all duration-300"
                  href="/"
                >
                  <svg
                    fill="currentColor"
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="0"
                    className="w-5 h-5"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke="none"
                      d="M16 8a6 6 0 016 6v7h-4v-7a2 2 0 00-2-2 2 2 0 00-2 2v7h-4v-7a6 6 0 016-6zM2 9h4v12H2z"
                    ></path>
                    <circle cx="4" cy="4" r="2" stroke="none"></circle>
                  </svg>
                </Link>
              </span>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

================
File: src/app/components/Header.tsx
================
"use client";
import React, { useEffect, useState } from "react";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/navigation";
import logoFull from "../../../public/logo_full.png";
import { FaRegCircleUser } from "react-icons/fa6";

export const Header = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const router = useRouter();
  const [user_icon, setuser_icon] = useState<string>("");

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = Number(localStorage.getItem("tokenExpires"));
      const user_icon = localStorage.getItem("user_icon") || "";

      if (isLoggedIn && Date.now() > tokenExpires) {
        localStorage.removeItem("isLoggedIn");
        localStorage.removeItem("tokenExpires");
        localStorage.removeItem("user_icon");
        setIsLoggedIn(false);
        setuser_icon("");
      } else {
        setIsLoggedIn(isLoggedIn);
        setuser_icon(user_icon);
      }
    };

    checkAuth();
    window.addEventListener("storage", checkAuth);
    window.addEventListener("logoutEvent", checkAuth);

    return () => {
      window.removeEventListener("storage", checkAuth);
      window.removeEventListener("logoutEvent", checkAuth);
    };
  }, []);

  const handleLogout = async () => {
    try {
      const response = await fetch("http://localhost:3000/user/logout", {
        method: "POST",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        localStorage.removeItem("isLoggedIn");
        localStorage.removeItem("tokenExpires");
        localStorage.removeItem("user_icon");
        setIsLoggedIn(false);
        router.push("/");
        window.dispatchEvent(new Event("logoutEvent"));
      }
    } catch (error) {
      console.error("Logout failed:", error);
    }
  };

  return (
    <header className="text-gray-600 body-font">
      <div className="container mx-auto flex flex-col items-center p-5 md:flex-row md:justify-between">
        <Link
          className="flex title-font font-medium items-center text-gray-900 justify-center"
          href="/"
        >
          <Image
            src={logoFull}
            width={0}
            height={0}
            sizes="100vw"
            alt="Site logo"
            className="max-w-[5rem] h-full"
          />
          <span className="hidden md:block text-xl">photoStockage</span>
        </Link>

        <nav className="flex flex-wrap items-center text-base mt-3 md:mt-0">
          <Link
            className="mr-5 hover:text-gray-900 bg-left-bottom bg-gradient-to-r from-[#4f46e5] to-[#d4d2f4] bg-[length:0%_2px] bg-no-repeat hover:bg-[length:100%_2px] transition-all duration-500 ease-out"
            href="/"
          >
            Home
          </Link>
          <Link
            className="mr-5 hover:text-gray-900 bg-left-bottom bg-gradient-to-r from-[#4f46e5] to-[#d4d2f4] bg-[length:0%_2px] bg-no-repeat hover:bg-[length:100%_2px] transition-all duration-500 ease-out"
            href="/about"
          >
            About
          </Link>
          <Link
            className="mr-5 hover:text-gray-900 bg-left-bottom bg-gradient-to-r from-[#4f46e5] to-[#d4d2f4] bg-[length:0%_2px] bg-no-repeat hover:bg-[length:100%_2px] transition-all duration-500 ease-out"
            href="/contact"
          >
            Contact Us
          </Link>
        </nav>

        <div className="flex justify-end ml-0">
          {isLoggedIn ? (
            <div className="flex items-center gap-4">
              {user_icon ? (
                <Image
                  src={user_icon}
                  alt="User icon"
                  width={0}
                  height={0}
                  sizes="100vw"
                  className="rounded-full object-cover w-8 h-8"
                />
              ) : (
                <FaRegCircleUser className="w-8 h-8 text-gray-600" />
              )}
              <button
                onClick={handleLogout}
                className="inline-flex items-center bg-red-500 text-white border-0 py-1 px-3 focus:outline-none hover:bg-red-600 rounded text-base mt-3 md:mt-0"
              >
                Logout
              </button>
            </div>
          ) : (
            <>
              <Link href="/register">
                <button className="inline-flex items-center text-white bg-indigo-500 border-0 py-1 px-3 focus:outline-none hover:bg-indigo-600 rounded text-base mt-3 md:mt-0">
                  Sign Up
                </button>
              </Link>
              <Link href="/login">
                <button className="inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-3 md:mt-0 ml-5 text-inherit">
                  Login
                </button>
              </Link>
            </>
          )}
        </div>
      </div>
    </header>
  );
};

================
File: src/app/components/Hero.tsx
================
"use client";
import React, { useEffect, useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/navigation";

export const Hero = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = Number(localStorage.getItem("tokenExpires"));

      if (isLoggedIn && Date.now() > tokenExpires) {
        localStorage.removeItem("isLoggedIn");
        localStorage.removeItem("tokenExpires");
        setIsLoggedIn(false);
      } else {
        setIsLoggedIn(isLoggedIn);
      }
    };

    checkAuth();
    const interval = setInterval(checkAuth, 60000);

    // Add listener for logout event
    window.addEventListener("logoutEvent", checkAuth);
    window.addEventListener("storage", checkAuth);

    return () => {
      window.removeEventListener("storage", checkAuth);
      window.removeEventListener("logoutEvent", checkAuth);
      clearInterval(interval);
    };
  }, []);

  const handleLogout = async () => {
    try {
      const response = await fetch("http://localhost:3000/user/logout", {
        method: "POST",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        localStorage.removeItem("isLoggedIn");
        localStorage.removeItem("tokenExpires");
        localStorage.removeItem("user_icon");
        setIsLoggedIn(false);
        router.push("/");
        window.dispatchEvent(new Event("logoutEvent"));
      }
    } catch (error) {
      console.error("Logout failed:", error);
    }
  };

  return (
    <section className="text-gray-600 body-font px-2 sm:px-[2rem]">
      <div className="container mx-auto flex flex-col px-5 py-24 md:flex-row md:items-center">
        <div className="flex flex-col items-center text-center mb-16 md:mb-0 md:items-start md:text-left md:pr-24 md:flex-grow">
          <h1 className="title-font text-3xl mb-4 font-medium text-gray-900">
            Share your photos. Download photos for your next project
            <br className="inline-block" />
            Start here.
          </h1>
          <p className="mb-9 leading-relaxed">
            Do you have photos you want to share with others? Do you want to
            find photos to use for your next project? Are you tired of copyright
            protected material? Then this site is the place to be.
            {!isLoggedIn && " Start now by signing up or logging in."}
          </p>
          <div className="flex justify-center">
            {isLoggedIn ? (
              <button
                onClick={handleLogout}
                className="inline-flex text-white bg-red-500 border-0 py-2 px-6 focus:outline-none hover:bg-red-600 rounded text-lg"
              >
                Logout
              </button>
            ) : (
              <>
                <Link href="/register">
                  <button className="inline-flex text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg">
                    Sign Up
                  </button>
                </Link>
                <Link href="/login">
                  <button className="ml-4 inline-flex text-gray-700 bg-gray-100 border-0 py-2 px-6 focus:outline-none hover:bg-gray-200 rounded text-lg">
                    Login
                  </button>
                </Link>
              </>
            )}
          </div>
        </div>
        <div className="hidden md:block">
          <Image
            src="https://images.pexels.com/photos/147411/italy-mountains-dawn-daybreak-147411.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
            width={0}
            height={0}
            alt="Picture"
            sizes="100vw"
            className="object-cover object-center rounded w-[720px] xl:w-[520px] 2xl:w-[480px] min-w-[420px]"
          />
        </div>
      </div>
    </section>
  );
};

================
File: src/app/components/Likes.tsx
================
"use client";
import { useRouter } from "next/navigation";
import React, { useState, useEffect } from "react";
import { FcLike } from "react-icons/fc";
import Link from "next/link";

export const Likes = ({ photo_id }: { photo_id: string }) => {
  const router = useRouter();
  const [likes, setLikes] = useState<{ count: string }[]>([]);
  const [liked, setLiked] = useState<{ hasLiked: boolean }>({
    hasLiked: false,
  });
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(true);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);

  const test = 1;

  useEffect(() => {
    const fetchData = async () => {
      if (!photo_id) return;

      try {
        // Check authentication with proper type handling
        const isLoggedIn = localStorage.getItem("isLoggedIn");
        const tokenExpires = localStorage.getItem("tokenExpires");
        const isAuthenticated =
          isLoggedIn === "true" &&
          tokenExpires &&
          Number(tokenExpires) > Date.now();

        setIsAuthenticated(Boolean(isAuthenticated));

        // Fetch likes count (this doesn't require auth)
        const likesResponse = await fetch(
          `http://localhost:3000/likes/likes/${photo_id}`,
          {
            headers: {
              Accept: "application/json",
            },
          }
        );

        if (!likesResponse.ok) {
          throw new Error(`HTTP error! status: ${likesResponse.status}`);
        }

        const likesData = await likesResponse.json();
        setLikes(likesData);

        // Only check if user has liked when authenticated
        if (isAuthenticated) {
          const hasLikedResponse = await fetch(
            `http://localhost:3000/likes/check/${photo_id}`,
            {
              headers: {
                Accept: "application/json",
              },
              credentials: "include",
            }
          );

          if (!hasLikedResponse.ok) {
            throw new Error(`HTTP error! status: ${hasLikedResponse.status}`);
          }

          const hasLikedData = await hasLikedResponse.json();
          setLiked(hasLikedData);
        } else {
          // Reset liked status when not authenticated
          setLiked({ hasLiked: false });
        }
      } catch (error) {
        setError(
          error instanceof Error ? error.message : "Failed to fetch data."
        );
      } finally {
        setLoading(false);
      }
    };

    fetchData();

    // Storage event listener with proper type handling
    const handleStorageChange = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn");
      const tokenExpires = localStorage.getItem("tokenExpires");
      const isAuthenticated =
        isLoggedIn === "true" &&
        tokenExpires &&
        Number(tokenExpires) > Date.now();

      setIsAuthenticated(Boolean(isAuthenticated));
    };

    window.addEventListener("storage", handleStorageChange);
    return () => window.removeEventListener("storage", handleStorageChange);
  }, [photo_id]);

  if (loading) {
    return <div># Likes</div>;
  }

  if (error) {
    return <p>{error}</p>;
  }

  const handleLikeUnlike = async () => {
    if (!isAuthenticated) {
      router.push("/login"); // Replace with your login route
      return;
    }

    if (liked.hasLiked) {
      try {
        const response = await fetch(
          `http://localhost:3000/likes/like/${photo_id}`,
          {
            method: "DELETE",
            headers: {
              Accept: "application/json",
            },
            credentials: "include",
          }
        );
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        // Refetch likes after unliking
        const likesResponse = await fetch(
          `http://localhost:3000/likes/likes/${photo_id}`,
          {
            headers: {
              Accept: "application/json",
            },
          }
        );

        if (!likesResponse.ok) {
          throw new Error(`HTTP error! status: ${likesResponse.status}`);
        }

        const likesData = await likesResponse.json();
        setLikes(likesData);
        setLiked({ hasLiked: false });
      } catch (error) {
        setError(
          error instanceof Error ? error.message : "Failed to fetch likes."
        );
      }
    } else {
      try {
        const response = await fetch(
          `http://localhost:3000/likes/like/${photo_id}`,
          {
            method: "POST",
            headers: {
              Accept: "application/json",
            },
            credentials: "include",
          }
        );
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        // Refetch likes after liking
        const likesResponse = await fetch(
          `http://localhost:3000/likes/likes/${photo_id}`,
          {
            headers: {
              Accept: "application/json",
            },
          }
        );

        if (!likesResponse.ok) {
          throw new Error(`HTTP error! status: ${likesResponse.status}`);
        }

        const likesData = await likesResponse.json();
        setLikes(likesData);
        setLiked({ hasLiked: true });
      } catch (error) {
        setError(
          error instanceof Error ? error.message : "Failed to fetch likes."
        );
      }
    }
  };

  return (
    <div className="flex gap-2 items-center">
      <div className="relative group cursor-pointer" onClick={handleLikeUnlike}>
        <FcLike
          className={`w-12 h-12 ${
            liked.hasLiked ? "opacity-100" : "opacity-30"
          } group-hover:opacity-100 duration-300 transition-all group-hover:scale-[1.2]`}
        />
      </div>

      {likes.length > 0 && likes[0].count === "1" ? (
        <p className="text-xl">{likes[0]?.count} Like</p>
      ) : (
        <p className="text-xl">{likes[0]?.count} Likes</p>
      )}
    </div>
  );
};

================
File: src/app/components/Polaroid.tsx
================
"use client";
import React, { useEffect, useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { Photo } from "../utils/interfaces";

export const Polaroid = () => {
  const [images, setImages] = useState<Photo[]>();

  useEffect(() => {
    const fetchImages = async () => {
      try {
        const response = await fetch("http://localhost:3000/photos/photos", {
          headers: {
            Accept: "application/json",
          },
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setImages(data);
      } catch (error) {
        console.error("Error fetching images:", error);
      }
    };

    fetchImages();
  }, []);

  return (
    <div className="flex flex-wrap justify-around gap-[30px] mt-5 mx-2 md:mx-8">
      {images?.map((image) => (
        <div
          key={image.id}
          className="
        p-[15px] pb-[60px] 
        shadow-[5px_15px_15px_rgb(225,225,225)] 
        h-full relative
        hover:shadow-[-5px_15px_15px_rgb(225,225,225)] 
        hover:scale-[1.1] 
        transition-all duration-500 
        after:content-[attr(polaroid-caption)] 
        after:absolute after:bottom-0 after:left-0 
        after:w-full after:text-center 
        after:p-[10px] after:text-[30px]
        after:transition-all after:opacity-50 
        after:hover:opacity-100 after:duration-1000
        mx-auto
        border border-1 border-gray-100
        "
          polaroid-caption={image.name}
        >
          <Link href={`/photo/${image.id}`}>
            <Image
              src={image.path}
              width={0}
              height={0}
              alt={image.name}
              sizes="100vw"
              className="max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto"
            />
          </Link>
        </div>
      ))}
    </div>
  );
};

================
File: src/app/components/SinglePolaroid.tsx
================
import React from "react";
import Image from "next/image";

export const SinglePolaroid = () => {
  return (
    <div className="mt-[5rem] min-h-screen md:min-h-0 mx-auto">
      <div
        className="
                border-solid border-1 border-gray-900 
                p-[15px] pb-[60px] 
                shadow-[5px_15px_15px_rgb(225,225,225)] 
                h-full relative
                hover:shadow-[-5px_15px_15px_rgb(225,225,225)] transition-all duration-500
                after:content-[attr(polaroid-caption)] 
                after:absolute after:bottom-0 after:left-0 
                after:w-full after:text-center 
                after:p-[10px] after:text-[30px]
                "
        polaroid-caption="Image 1"
      >
        <Image
          src="https://images.pexels.com/photos/20412111/pexels-photo-20412111/free-photo-of-cactus.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
          alt="Picture"
          sizes="100vw"
          width={0}
          height={0}
          quality={100}
          className="w-full h-auto object-scale-down max-w-[80vw] max-h-[80vh] mx-auto"
          unoptimized
        />
      </div>
    </div>
  );
};

================
File: src/app/components/SlateEditor.tsx
================
"use client";
import React, { useMemo, useState, useCallback } from "react";
import { Slate, Editable, withReact, ReactEditor } from "slate-react";
import { createEditor, Descendant, BaseEditor } from "slate";
import { withHistory } from "slate-history";

// Define custom types for plain text
type CustomElement = {
  type: "paragraph";
  children: CustomText[];
};

type CustomText = {
  text: string;
};

// Extend Slate's custom types
declare module "slate" {
  interface CustomTypes {
    Editor: BaseEditor & ReactEditor;
    Element: CustomElement;
    Text: CustomText;
  }
}

interface SlateEditorProps {
  onSubmit: (content: string) => void;
}

const initialValue: Descendant[] = [
  {
    type: "paragraph",
    children: [{ text: "" }],
  },
];

const SlateEditor = ({ onSubmit }: SlateEditorProps) => {
  const editor = useMemo(() => withReact(withHistory(createEditor())), []);
  const [value, setValue] = useState<Descendant[]>(initialValue);
  const [focused, setFocused] = useState(false);

  const handleFocus = useCallback(() => {
    setFocused(true);
  }, []);

  const handleBlur = useCallback(() => {
    setFocused(false);
  }, []);

  const handleChange = useCallback(
    (newValue: Descendant[]) => {
      setValue(newValue);
      const { selection } = editor;
      if (selection && focused) {
        ReactEditor.focus(editor);
      }
    },
    [editor, focused]
  );

  const renderElement = useCallback((props: any) => {
    return <p {...props.attributes}>{props.children}</p>;
  }, []);

  const handleSubmit = () => {
    const content = value
      .map((node) => (node as any).children[0].text)
      .join("\n")
      .trim();

    if (content) {
      onSubmit(content);
      setValue(initialValue);
    }
  };

  return (
    <div>
      <Slate editor={editor} initialValue={value} onChange={handleChange}>
        <Editable
          renderElement={renderElement}
          placeholder="Leave a comment if you'd like"
          className="border border-gray-300 p-2 h-40 relative"
          onFocus={handleFocus}
          onBlur={handleBlur}
        />
      </Slate>
      <button
        onClick={handleSubmit}
        className="mt-2 px-4 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600 transition-colors"
      >
        Submit Comment
      </button>
    </div>
  );
};

export default SlateEditor;

================
File: src/app/contact/page.tsx
================
import React from "react";
import Image from "next/image";
import logoFull from "../../../public/logo_full.png";
import Link from "next/link";

export default function ContactUs() {
  return (
    <div className="min-h-[100vh] flex flex-col px-0 sm:px-5 md:px-[5rem] mx-auto">
      <div
        className="flex flex-col items-center mt-[5rem] p-0 sm:p-10 md:flex-row md:items-stretch 
                    md:border-2 md:border-solid md:border-blue-900 md:outline md:outline-2 
                    md:outline-offset-[15px] md:outline-blue-900 relative"
      >
        <div className="w-full text-center md:w-1/3 md:pr-8">
          <Image
            src={logoFull}
            width={0}
            height={0}
            sizes="100vw"
            alt="Site logo"
            className="w-[5rem] h-auto pt-24 mb-4 mx-auto"
          />
          <p className="text-gray-600 leading-relaxed text-base">
            You can also contact us through email.
          </p>
          <p className="text-gray-600 leading-relaxed text-base">
            Email: photostockage@photostockage.com
          </p>
          <p className="text-gray-600 leading-relaxed text-base">
            Or through our social media links that can be found{" "}
            <Link href="/">here</Link>
          </p>
        </div>

        {/* Vertical Divider */}
        <div className="hidden md:block absolute top-4 bottom-4 left-1/3 w-px bg-blue-900"></div>

        <div className="w-full md:w-2/3 md:pl-4">
          <section className="text-gray-600 body-font relative">
            <div className="container py-24 mx-auto">
              <div className="flex flex-col text-center w-full mb-12">
                <h1 className="text-3xl font-medium title-font mb-4 text-gray-900">
                  Contact Us
                </h1>
                <p className="mx-auto leading-relaxed text-base w-full sm:w-2/3">
                  For any questions you might have. For any suggestions. Or just
                  to chat with us.
                </p>
              </div>
              <div className="w-full px-4 sm:w-1/2 sm:mx-auto">
                <div className="flex flex-wrap -m-2">
                  <div className="p-2 w-full sm:w-1/2">
                    <div className="relative">
                      <label
                        htmlFor="name"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Name
                      </label>
                      <input
                        type="text"
                        id="name"
                        name="name"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                      />
                    </div>
                  </div>
                  <div className="p-2 w-full sm:w-1/2">
                    <div className="relative">
                      <label
                        htmlFor="email"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Email
                      </label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                      />
                    </div>
                  </div>
                  <div className="p-2 w-full">
                    <div className="relative">
                      <label
                        htmlFor="message"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Message
                      </label>
                      <textarea
                        id="message"
                        name="message"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"
                      ></textarea>
                    </div>
                  </div>
                  <div className="p-2 w-full">
                    <button className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg">
                      Send message
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Header } from "./components/Header";
import { Footer } from "./components/Footer";
import CookieConsent from "./components/CookieConsent";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "photoStockage",
  description: "A site where you can share your photos",
  icons: {
    icon: "/favicon.ico",
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${inter.className} flex flex-col`}>
        <Header />
        {children}
        <Footer />
        <CookieConsent />
      </body>
    </html>
  );
}

================
File: src/app/login/page.tsx
================
"use client";
import React, { useEffect, useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";

export default function LoginPage() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [errors, setErrors] = useState({
    email: "",
    password: "",
  });
  const [loginError, setLoginError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = localStorage.getItem("tokenExpires");
      const isAuthenticated =
        isLoggedIn && tokenExpires && Number(tokenExpires) > Date.now();

      if (isAuthenticated) {
        router.push("/");
      }
    };

    checkAuth();
  }, [router]);

  // Handle input changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value.trim(),
    }));
    // Clear field-specific error when user starts typing
    if (errors[name as keyof typeof errors]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
    // Clear general login error when user makes any change
    if (loginError) {
      setLoginError("");
    }
  };

  // Validate form fields
  const validateForm = () => {
    const newErrors = {
      email: "",
      password: "",
    };
    let isValid = true;

    if (!formData.email) {
      newErrors.email = "Email field cannot be empty";
      isValid = false;
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Please enter a valid email address";
      isValid = false;
    }

    if (!formData.password) {
      newErrors.password = "Password field cannot be empty";
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  // Sanitize input data
  const sanitizeData = (data: typeof formData) => {
    return {
      email: data.email.toLowerCase().trim(),
      password: data.password.trim(),
    };
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoginError("");
    if (!validateForm()) return;
    setIsLoading(true);

    try {
      const response = await fetch("http://localhost:3000/user/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(sanitizeData(formData)),
      });

      const loginData = await response.json();
      const token = loginData.token;
      const tokenParts = token.split(".");
      const payload = JSON.parse(atob(tokenParts[1]));

      const userResponse = await fetch(
        `http://localhost:3000/user/user/${payload.id}`,
        {
          credentials: "include",
          headers: { Accept: "application/json" },
        }
      );

      const userData = await userResponse.json();
      const user = userData[0]; // Access first element of array

      const expiresIn = 30 * 24 * 60 * 60 * 1000;
      localStorage.setItem("isLoggedIn", "true");
      localStorage.setItem("tokenExpires", String(Date.now() + expiresIn));
      localStorage.setItem("user_icon", user.user_icon || "");

      window.dispatchEvent(new Event("storage"));
      router.push("/");
    } catch (error) {
      console.error("Login error:", error);
      setLoginError(error instanceof Error ? error.message : "Login failed");
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-[calc(100vh-200px)] flex flex-col px-0 sm:px-5 mx-auto w-full max-w-md">
      <section className="text-gray-600 body-font relative">
        <div className="container py-24 mx-auto">
          <div className="flex flex-col text-center w-full mb-12">
            <h1 className="text-3xl font-medium title-font mb-4 text-gray-900">
              Login
            </h1>
            <p className="mx-auto leading-relaxed text-base">
              Welcome back! Please enter your credentials to access your
              account.
            </p>
          </div>

          <form onSubmit={handleSubmit} className="w-full px-4">
            <div className="flex flex-wrap -m-2">
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="email"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Email
                  </label>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border ${
                      errors.email ? "border-red-500" : "border-gray-300"
                    } focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out`}
                  />
                  {errors.email && (
                    <p className="text-red-500 text-xs mt-1">{errors.email}</p>
                  )}
                </div>
              </div>

              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="password"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Password
                  </label>
                  <input
                    type="password"
                    id="password"
                    name="password"
                    value={formData.password}
                    onChange={handleChange}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border ${
                      errors.password ? "border-red-500" : "border-gray-300"
                    } focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out`}
                  />
                  {errors.password && (
                    <p className="text-red-500 text-xs mt-1">
                      {errors.password}
                    </p>
                  )}
                </div>
              </div>

              {loginError && (
                <div className="p-2 w-full">
                  <p className="text-red-500 text-sm text-center">
                    {loginError}
                  </p>
                </div>
              )}

              <div className="p-2 w-full">
                <button
                  type="submit"
                  disabled={isLoading}
                  className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isLoading ? "Logging in..." : "Login"}
                </button>
              </div>

              <div className="p-2 w-full text-center mt-4">
                <p className="text-sm text-gray-600">
                  Don&apos;t have an account?{" "}
                  <Link
                    href="/sign-up"
                    className="text-indigo-500 hover:text-indigo-600"
                  >
                    Sign up here
                  </Link>
                </p>
                <Link
                  href="/forgot-password"
                  className="text-sm text-indigo-500 hover:text-indigo-600 block mt-2"
                >
                  Forgot your password?
                </Link>
              </div>
            </div>
          </form>
        </div>
      </section>
    </div>
  );
}

================
File: src/app/page.tsx
================
import { Polaroid } from "./components/Polaroid";
import { Hero } from "./components/Hero";

export default function Home() {
  return (
    <>
      <Hero />
      <main className="min-h-[100vh]">
        <Polaroid />
      </main>
    </>
  );
}

================
File: src/app/photo/[id]/page.tsx
================
"use client";
import React, { useState, useEffect, Fragment } from "react";
import Image from "next/image";
import { usePathname } from "next/navigation";
import { Photo } from "../../utils/interfaces";
import { Likes } from "@/app/components/Likes";
import { Comments } from "@/app/components/Comments";
import DownloadButton from "@/app/components/DownloadButton";

export const SinglePhoto = () => {
  const [photo, setPhoto] = useState<Photo>({
    id: "",
    user_id: "",
    name: "",
    description: "",
    path: "",
    status: false,
  });

  const pathname = usePathname();
  const id = pathname?.split("/").pop();

  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(true);

  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);

  useEffect(() => {
    const fetchPhoto = async () => {
      if (!id) return;

      try {
        const response = await fetch(
          `http://localhost:3000/photos/photo/${id}`,
          {
            headers: {
              Accept: "application/json",
            },
          }
        );

        if (!response.ok) {
          throw new Error(`HTTP error status: ${response.status}`);
        }

        const data = await response.json();
        setPhoto(data);
      } catch (error) {
        setError(
          error instanceof Error ? error.message : "Failed to fetch photo."
        );
      } finally {
        setLoading(false);
      }
    };

    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = localStorage.getItem("tokenExpires");
      const isAuthenticated =
        isLoggedIn && tokenExpires && Number(tokenExpires) > Date.now();

      setIsAuthenticated(Boolean(isAuthenticated));
    };

    checkAuth();

    fetchPhoto();
  }, [id]);

  if (loading) {
    return <div className="mt-[5rem] text-center">Loading...</div>;
  }

  if (error) {
    return (
      <div className="mt-[5rem] text-center">
        <p>{error}</p>
      </div>
    );
  }

  if (!photo) {
    return <div className="mt-[5rem] text-center">No photo found</div>;
  }

  const handleDownload = async () => {
    try {
      // If user is authenticated, track the download
      if (isAuthenticated) {
        try {
          const response = await fetch(
            `http://localhost:3000/downloads/download/${photo.id}`,
            {
              method: "POST",
              credentials: "include",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
              },
            }
          );

          if (!response.ok) {
            console.error("Failed to track download");
          }
        } catch (error) {
          console.error("Error tracking download:", error);
          // Continue with download even if tracking fails
        }
      }

      // Proceed with download regardless of authentication status
      const response = await fetch(photo.path);
      const blob = await response.blob();

      const downloadUrl = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = downloadUrl;

      // Get file extension from path or default to .jpg
      const extension = photo.path.split(".").pop() || "jpg";
      link.download = `${photo.name}.${extension}`;

      document.body.appendChild(link);
      link.click();

      document.body.removeChild(link);
      window.URL.revokeObjectURL(downloadUrl);
    } catch (error) {
      console.error("Download failed:", error);
      // You might want to add some error handling UI here
    }
  };

  return photo.status ? (
    <>
      <div className="mt-[5rem] min-h-screen md:min-h-0 mx-auto">
        <div
          className="
          border-solid
          p-[15px] pb-[60px] 
          shadow-[5px_15px_15px_rgb(225,225,225)] 
          h-full relative
          hover:shadow-[-5px_15px_15px_rgb(225,225,225)] 
          transition-all duration-500
          after:content-[attr(polaroid-caption)] 
          after:absolute after:bottom-0 after:left-0 
          after:w-full after:text-center 
          after:p-[10px] after:text-[30px]
          border border-1 border-gray-100
        "
          polaroid-caption={photo.name}
        >
          <Image
            src={photo.path}
            alt={photo.name}
            sizes="100vw"
            width={0}
            height={0}
            quality={100}
            className="w-full h-auto object-scale-down max-w-[80vw] max-h-[80vh] mx-auto"
            unoptimized
          />
        </div>
        <div className="mt-8 flex justify-between">
          <Likes photo_id={photo.id} />
          <DownloadButton onClick={handleDownload} />
        </div>
      </div>

      <div className="mx-[10rem] mt-8">{photo.description}</div>

      <div className="mt-8">
        <Comments photo_id={photo.id} />
      </div>
    </>
  ) : (
    <div className="mt-[5rem] text-center">
      <p>This photo has been made private.</p>
    </div>
  );
};

export default SinglePhoto;

================
File: src/app/register/page.tsx
================
"use client";
import React, { useState, useRef, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import Image from "next/image";

export default function RegisterPage() {
  const router = useRouter();
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    user_icon: null as File | null,
  });

  const [previewUrl, setPreviewUrl] = useState<string>("");
  const [errors, setErrors] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    user_icon: "",
  });
  const [registrationError, setRegistrationError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [registrationSuccess, setRegistrationSuccess] = useState(false);

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = localStorage.getItem("tokenExpires");
      const isAuthenticated =
        isLoggedIn && tokenExpires && Number(tokenExpires) > Date.now();

      if (isAuthenticated) {
        router.push("/");
      }
    };

    checkAuth();
  }, [router]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value.trim(),
    }));

    if (errors[name as keyof typeof errors]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }

    if (registrationError) {
      setRegistrationError("");
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.size > 8 * 1024 * 1024) {
        // 5MB limit
        setErrors((prev) => ({
          ...prev,
          user_icon: "File size must be less than 5MB",
        }));
        return;
      }

      if (!file.type.startsWith("image/")) {
        setErrors((prev) => ({
          ...prev,
          user_icon: "File must be an image",
        }));
        return;
      }

      setFormData((prev) => ({
        ...prev,
        user_icon: file,
      }));

      // Create preview URL for the image
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result as string);
      };
      reader.readAsDataURL(file);

      setErrors((prev) => ({
        ...prev,
        user_icon: "",
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
      user_icon: "",
    };
    let isValid = true;

    if (!formData.username) {
      newErrors.username = "Username is required";
      isValid = false;
    } else if (formData.username.length < 3) {
      newErrors.username = "Username must be at least 3 characters long";
      isValid = false;
    }

    if (!formData.email) {
      newErrors.email = "Email is required";
      isValid = false;
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Please enter a valid email address";
      isValid = false;
    }

    if (!formData.password) {
      newErrors.password = "Password is required";
      isValid = false;
    } else if (formData.password.length < 6) {
      newErrors.password = "Password must be at least 6 characters long";
      isValid = false;
    }

    if (!formData.confirmPassword) {
      newErrors.confirmPassword = "Please confirm your password";
      isValid = false;
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "Passwords do not match";
      isValid = false;
    }

    // User icon validation only if a file was selected
    if (formData.user_icon) {
      if (formData.user_icon.size > 5 * 1024 * 1024) {
        newErrors.user_icon = "File size must be less than 5MB";
        isValid = false;
      } else if (!formData.user_icon.type.startsWith("image/")) {
        newErrors.user_icon = "File must be an image";
        isValid = false;
      }
    }

    setErrors(newErrors);
    return isValid;
  };

  const clearImageSelection = () => {
    setFormData((prev) => ({
      ...prev,
      user_icon: null,
    }));
    setPreviewUrl("");
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!validateForm()) return;
    setIsLoading(true);

    try {
      let imagePath = "";
      if (formData.user_icon) {
        const fileData = new FormData();
        const fileIdentifier = crypto.randomUUID();
        fileData.append("file", formData.user_icon);
        fileData.append("identifier", fileIdentifier);

        const uploadResponse = await fetch("/api/upload", {
          method: "POST",
          body: fileData,
        });

        const uploadResult = await uploadResponse.json();
        if (!uploadResponse.ok || !uploadResult.success) {
          throw new Error(uploadResult.error || "Image upload failed");
        }

        imagePath = uploadResult.fileUrl;
      }

      const requestBody = {
        username: formData.username,
        email: formData.email,
        password: formData.password,
        user_icon: imagePath,
      };

      const response = await fetch(`http://localhost:3000/user/register`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      const responseData = await response.json();
      if (!response.ok) {
        throw new Error(responseData.message || "Registration failed");
      }

      setRegistrationSuccess(true);
      setRegistrationError("");
    } catch (error) {
      console.error("Registration error:", error);
      setRegistrationError(
        error instanceof Error ? error.message : "Registration failed"
      );
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-[calc(100vh-200px)] flex flex-col px-0 sm:px-5 mx-auto w-full max-w-md">
      <section className="text-gray-600 body-font relative">
        <div className="container py-24 mx-auto">
          <div className="flex flex-col text-center w-full mb-12">
            <h1 className="text-3xl font-medium title-font mb-4 text-gray-900">
              Register
            </h1>
            <p className="mx-auto leading-relaxed text-base">
              {registrationSuccess
                ? "Registration successful! You can now proceed to login."
                : "Create your account to start sharing photos."}
            </p>
          </div>

          <form onSubmit={handleSubmit} className="w-full px-4">
            <div className="flex flex-wrap -m-2">
              {/* Username field */}
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="username"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Username
                  </label>
                  <input
                    type="text"
                    id="username"
                    name="username"
                    value={formData.username}
                    onChange={handleChange}
                    disabled={registrationSuccess}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border 
                      ${errors.username ? "border-red-500" : "border-gray-300"}
                      focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 
                      text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors 
                      duration-200 ease-in-out disabled:opacity-50`}
                  />
                  {errors.username && (
                    <p className="text-red-500 text-xs mt-1">
                      {errors.username}
                    </p>
                  )}
                </div>
              </div>

              {/* Email field */}
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="email"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Email
                  </label>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    disabled={registrationSuccess}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border 
                      ${errors.email ? "border-red-500" : "border-gray-300"}
                      focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 
                      text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors 
                      duration-200 ease-in-out disabled:opacity-50`}
                  />
                  {errors.email && (
                    <p className="text-red-500 text-xs mt-1">{errors.email}</p>
                  )}
                </div>
              </div>

              {/* Password field */}
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="password"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Password
                  </label>
                  <input
                    type="password"
                    id="password"
                    name="password"
                    value={formData.password}
                    onChange={handleChange}
                    disabled={registrationSuccess}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border 
                      ${errors.password ? "border-red-500" : "border-gray-300"}
                      focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 
                      text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors 
                      duration-200 ease-in-out disabled:opacity-50`}
                  />
                  {errors.password && (
                    <p className="text-red-500 text-xs mt-1">
                      {errors.password}
                    </p>
                  )}
                </div>
              </div>

              {/* Confirm Password field */}
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="confirmPassword"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Confirm Password
                  </label>
                  <input
                    type="password"
                    id="confirmPassword"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleChange}
                    disabled={registrationSuccess}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border 
                      ${
                        errors.confirmPassword
                          ? "border-red-500"
                          : "border-gray-300"
                      }
                      focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 
                      text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors 
                      duration-200 ease-in-out disabled:opacity-50`}
                  />
                  {errors.confirmPassword && (
                    <p className="text-red-500 text-xs mt-1">
                      {errors.confirmPassword}
                    </p>
                  )}
                </div>
              </div>

              {/* User Icon field */}
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="user_icon"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Profile Picture (Optional) (8MB max)
                  </label>
                  <input
                    type="file"
                    id="user_icon"
                    name="user_icon"
                    ref={fileInputRef}
                    onChange={handleFileChange}
                    accept="image/*"
                    disabled={registrationSuccess}
                    className="hidden"
                  />
                  <div className="flex flex-col items-center gap-4">
                    {previewUrl && (
                      <>
                        <Image
                          src={previewUrl}
                          alt="Profile preview"
                          width={100}
                          height={100}
                          className="rounded-full object-cover"
                        />
                        <button
                          type="button"
                          onClick={clearImageSelection}
                          disabled={registrationSuccess}
                          className="text-red-500 hover:text-red-700 font-semibold py-1 px-3 rounded disabled:opacity-50"
                        >
                          Remove Photo
                        </button>
                      </>
                    )}
                    <button
                      type="button"
                      onClick={() => fileInputRef.current?.click()}
                      disabled={registrationSuccess}
                      className="bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold py-2 px-4 border border-gray-300 rounded shadow disabled:opacity-50 mt-2"
                    >
                      Choose Profile Picture
                    </button>
                  </div>
                  {errors.user_icon && (
                    <p className="text-red-500 text-xs mt-1">
                      {errors.user_icon}
                    </p>
                  )}
                </div>
              </div>

              {registrationError && (
                <div className="p-2 w-full">
                  <p className="text-red-500 text-sm text-center">
                    {registrationError}
                  </p>
                </div>
              )}

              <div className="p-2 w-full">
                {registrationSuccess ? (
                  <Link href="/login">
                    <button
                      type="button"
                      className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg"
                    >
                      Proceed to Login
                    </button>
                  </Link>
                ) : (
                  <button
                    type="submit"
                    disabled={isLoading}
                    className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg disabled:opacity-50"
                  >
                    {isLoading ? "Registering..." : "Register"}
                  </button>
                )}
              </div>

              <div className="p-2 w-full text-center mt-4">
                <p className="text-sm text-gray-600">
                  Already have an account?{" "}
                  <Link
                    href="/login"
                    className="text-indigo-500 hover:text-indigo-600"
                  >
                    Login here
                  </Link>
                </p>
              </div>
            </div>
          </form>
        </div>
      </section>
    </div>
  );
}

================
File: src/app/utils/interfaces.tsx
================
export interface Photo {
  id: string;
  user_id: string;
  name: string;
  description: string;
  path: string;
  status: boolean;
}

export interface Comment {
  id: string;
  content: string;
  id_photo: string;
  id_user: string;
  status: boolean;
}

export interface User {
  id: string;
  username: string;
  email: string;
  user_icon: string;
}

================
File: tailwind.config_old.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
    screens: {
      'usm': {'max': '400px'},
      'sm': {'max': '639px'},
      'smcustom': {'max': '450px'},
      'md': {'max': '767px'},
      'mdim': {'max': '795px'},
      'mdcustom': {'max': '830px'},
      'lgcustom': {'max': '930px'},
      'lg': {'max': '1023px'},
      'xl': {'max': '1279px'},
      '2xl': {'max': '1535px'},
    }
  },
  plugins: [],
};
export default config;

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
